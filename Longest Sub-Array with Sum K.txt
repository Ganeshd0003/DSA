Longest Sub-Array with Sum K

Given an array arr containing n integers and an integer k. Your task is to find the length of the longest Sub-Array with the sum of the elements equal to the given value k.

Examples:

Input : n = 6, arr[] = {10, 5, 2, 7, 1, 9}, k = 15
Output : 4
Explanation: The sub-array is {5, 2, 7, 1}.
Input : n= 3, arr[] = {-1, 2, 3}, k = 6
Output : 0
Explanation: There is no such sub-array with sum 6.
Expected Time Complexity: O(n).
Expected Auxiliary Space: O(n).

Constraints:
1<=n<=105
-105<=arr[i], K<=105

Solution:

class Solution {
    public:
    int lenOfLongSubarr(int A[], int N, int K) { 
        int n = N;
        int maxLen = 0;
        int sum = 0;
        map<int, int> prefixSum;
        
        for (int i = 0; i < n; i++) {
            sum += A[i];
            if (sum == K) {
                maxLen = max(maxLen, i + 1);
            }
            int rem = sum - K;
            if (prefixSum.find(rem) != prefixSum.end()) {
                int currLen = i - prefixSum[rem];
                maxLen = max(maxLen, currLen);
            }
            if (prefixSum.find(sum) == prefixSum.end()) 
                prefixSum[sum] = i;
        }
        return maxLen;
    } 
};
